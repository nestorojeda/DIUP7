/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import core.ImageHandler;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/**
 *
 * @author nestorojeda
 */
public class ImagePanel extends javax.swing.JPanel {
    private BufferedImage img;
    private BufferedImage img_original;
    private BufferedImage img_t;
    
    private boolean loaded = false;
    private boolean modified = false;

  
    
    public ImagePanel(){
        initComponents();
 
    }

   
    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        g.drawImage(img, 0, 0,800,600, this);
    }

   
       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    void setImage(BufferedImage img){
        this.img = img;
        this.repaint();
        
    }
    
    void setImage(File file) {
        try{
            img_original = ImageIO.read(file);
            img = img_original;     
            loaded = true;
        } catch (Exception e){
            System.out.print(e);
        }
        
        this.repaint();
    }
    
    void thresholding(int t){
        img_t = ImageHandler.toBufferedImage(ImageHandler.thresholding(ImageHandler.toMat(img_original), t));
        img = img_t;
        modified = true;
        this.repaint();

    }
    
    BufferedImage getImage(){
        return img;
    }
    
    BufferedImage getOriginal(){
        return img_original;
    }
    
    BufferedImage getModified(){
        return img_t;
    }
    
    
    void checkOriginal(){
        if(loaded && modified){
            img = img_original;
            repaint();
        }
        
    }
    
    void returnToModifiedImage(){
        if(loaded && modified){
            img = img_t;
            repaint();
        }
    }

    boolean isModified() {
        return modified;
    }
    
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
